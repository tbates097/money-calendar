// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  accounts              Account[]
  sessions              Session[]
  transactions          Transaction[]
  userConfigurations    UserConfiguration[]
  simplefinAccounts     SimplefinAccount[]
  simplefinConnection   SimplefinConnection?
  importedTransactionIds ImportedTransactionId[]
  creditAnalysisCustomCategories CreditAnalysisCustomCategory[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  name      String
  amount    Float
  date      String   // Store as string to match current format (YYYY-MM-DD)
  type      String   // 'bill', 'paycheck', 'income', 'expense', 'internal_transfer'
  recurring Boolean  @default(false)
  schedule  Json?    // Store ScheduleConfig as JSON
  source    String?  // Track where transaction came from (manual, simplefin, csv)
  externalId String? // For SimpleFIN transactions
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, type])
}

model UserConfiguration {
  id                String   @id @default(cuid())
  userId            String   @unique
  balanceStart      Float    @default(0)
  payPeriodDays     Int      @default(14)
  monthsToProject   Int      @default(12)
  safetyCushionDays Int      @default(3)
  selectedAccountId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SimplefinAccount {
  id       String @id @default(cuid())
  userId   String
  accountId String // SimpleFIN account ID
  name     String
  type     String
  balance  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId])
  @@index([userId])
}

model SimplefinConnection {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessUrl    String
  bankName     String
  isActive     Boolean   @default(true)
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ImportedTransactionId {
  id            String   @id @default(cuid())
  userId        String
  transactionId String   // The external transaction ID that was imported
  source        String   // 'simplefin', 'csv', etc.
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transactionId, source])
  @@index([userId, source])
}

model CreditAnalysisCustomCategory {
  id            String   @id @default(cuid())
  userId        String
  transactionId String   // SimpleFIN transaction ID
  category      String   // Custom category assigned
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, transactionId])
  @@index([userId])
}